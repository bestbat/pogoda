#!/usr/bin/env python3

import argparse
import os
import sys

import lxml.html

import backend.hidmet
import backend.metar
import frontend.terminal


EXIT_SUCCESS = 0
EXIT_NO_KNOWN_STATIONS = 1
EXIT_NETWORK_ERROR = 2
EXIT_UNKNOWN_BACKEND = 3


def get_stations_by_abbrs(abbrs):
    return list(map(lambda x: backend.hidmet.STATIONS[x], abbrs))


def print_stations_list():
    for abbr in backend.hidmet.STATIONS:
        print(f"{abbr}\t%s" % backend.hidmet.STATIONS[abbr])


def filter_known_items(requested, known, not_found_msg):
    valid = []
    for item in requested:
        if item in known:
            valid.append(item)
        else:
            print(not_found_msg % item, file=sys.stderr)
    return valid


def parse_metar_args(args):
    return 'metar', []


def parse_hidmet_args(args):
    if args.list:
        print_stations_list()
        sys.exit(EXIT_SUCCESS)

    abbrs = filter_known_items(args.station, backend.hidmet.STATIONS, "Unknown weather station: %s")
    if len(abbrs) == 0:
        sys.exit(EXIT_NO_KNOWN_STATIONS)

    station_names = backend.hidmet.STATIONS.values() if args.all \
        else get_stations_by_abbrs(abbrs)
    return 'hidmet', station_names


def parse_arguments():
    parser = argparse.ArgumentParser(prog='rhmz')
    subparsers = parser.add_subparsers(help='backend selection')
    parser_hidmet = subparsers.add_parser('hidmet', help='hidmet backend')
    parser_hidmet.add_argument("-l", "--list",
                        help="list all weather stations",
                        action="store_true")
    parser_hidmet.add_argument("-a", "--all",
                        help="show weather reports from all stations",
                        action="store_true")
    parser_hidmet.add_argument('station', nargs='*', default=['bg'],
                        help='weather station abbreviation')
    parser_hidmet.set_defaults(func=parse_hidmet_args)

    parser_metar = subparsers.add_parser('metar', help='metar backend')
    parser_metar.set_defaults(func=parse_metar_args)

    args = parser.parse_args()

    if 'func' in args:
        return args.func(args)
    else:
        return 'hidmet', get_stations_by_abbrs(['bg'])


selected_backend, stations = parse_arguments()

# get weather reports (backend)
if selected_backend == 'hidmet':
    try:
        hidmet_page = backend.hidmet.get_weather_report_page()
    except Exception:
        print("Failed to get web page:", sys.exc_info()[1], file=sys.stderr)
        sys.exit(EXIT_NETWORK_ERROR)

    hidmet_dom_tree = lxml.html.fromstring(hidmet_page.content)
    date = backend.hidmet.parse_date(hidmet_dom_tree)
    header = backend.hidmet.HEADER + os.linesep + date
    reports = backend.hidmet.parse_reports(hidmet_dom_tree, stations)
elif selected_backend == 'metar':
    response = backend.metar.get_json()
    header = 'METAR'
    reports = backend.metar.parse_json(response.content)
else:
    print("Unknown backend: %s" % backend, file=sys.stderr)
    exit(EXIT_UNKNOWN_BACKEND)

# render and output weather reports (frontend)
tables = frontend.terminal.render_tables(reports)
print(header)
frontend.terminal.output_tables(tables)
