#!/usr/bin/env python3

import argparse
import signal
import sys

import backend.hidmet
import backend.metar_json
import backend.metar_xml
import frontend.terminal


EXIT_SUCCESS = 0
EXIT_UNKNOWN_BACKEND = 1
EXIT_NO_REPORTS = 4
EXIT_BROKEN_PIPE = 141


def sigpipe_handler():
    sys.exit(EXIT_BROKEN_PIPE);

def parse_arguments():
    parser = argparse.ArgumentParser(prog='rhmz')
    subparsers = parser.add_subparsers(help='backend selection')

    parser_hidmet = subparsers.add_parser('hidmet', help='hidmet.gov.rs backend')
    parser_hidmet.set_defaults(func=backend.hidmet.parse_args)
    parser_hidmet.add_argument("-l", "--list",
                               help="list all supported weather stations",
                               action="store_true")
    parser_hidmet.add_argument('station', nargs='*', default=[],
                               help='weather station abbreviation')

    parser_metar_xml = subparsers.add_parser('metar_xml', help='aviationweather.gov METAR XML backend')
    parser_metar_xml.set_defaults(func=backend.metar_xml.parse_args)
    parser_metar_xml.add_argument("-l", "--list",
                                  help="list some of the supported weather stations",
                                  action="store_true")
    parser_metar_xml.add_argument('station', nargs='*', default=[],
                                  help='ICAO airport code')

    parser_metar_json = subparsers.add_parser('metar_json', help='aviationweather.gov METAR JSON backend')
    parser_metar_json.set_defaults(func=backend.metar_json.parse_args)
    parser_metar_json.add_argument("-l", "--list",
                                   help="list all supported weather stations",
                                   action="store_true")
    parser_metar_json.add_argument('station', nargs='*', default=[],
                                   help='ICAO airport code')

    args = parser.parse_args()

    return args.func(args) if 'func' in args \
        else ('backend.hidmet', backend.hidmet.get_stations_by_abbrs(['bg']))


signal.signal(signal.SIGPIPE, sigpipe_handler)

selected_backend, stations = parse_arguments()

try:
    fetch_reports = getattr(sys.modules[selected_backend], 'fetch')
except Exception:
    print("Cannot load backend: %s" % selected_backend, file=sys.stderr)
    print(sys.exc_info(), file=sys.stderr)
    sys.exit(EXIT_UNKNOWN_BACKEND)

reports, header = fetch_reports(stations)

if reports:
    frontend.terminal.render_and_output(reports, header)
else:
    sys.exit(EXIT_NO_REPORTS)
